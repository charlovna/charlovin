#include <iostream>
#include <string>
#include <vector>
#include <cctype>
using namespace std;

// Book class encapsulating book details
class Book {
private:
    string id, isbn, title, author, edition, publication, category;
public:
    Book(string id, string isbn, string title, string author, string edition, string publication, string category) {
        this->id = id;
        this->isbn = isbn;
        this->title = title;
        this->author = author;
        this->edition = edition;
        this->publication = publication;
        this->category = category;
    }
    string getID() { return id; }
    string getCategory() { return category; }
    void displayBook() {
        cout << id << "\t" << isbn << "\t" << title << "\t" << author << "\t" << edition << "\t" << publication << "\t" << category << endl;
    }
    void editBook(string new_isbn, string new_title, string new_author, string new_edition, string new_publication) {
        isbn = new_isbn;
        title = new_title;
        author = new_author;
        edition = new_edition;
        publication = new_publication;
    }
};

// Library class encapsulating book management system
class Library {
private:
    vector<Book> books;
public:
    void addBook();
    void editBook();
    void searchBook();
    void deleteBook();
    void viewBooksByCategory();
    void viewAllBooks();
};

// Function to validate and get menu option (1-7)
int getValidChoice() {
    string input;
    while (true) {
        cout << "\nEnter choice (1-7): ";
        cin >> input;

        if (input.length() == 1 && isdigit(input[0]) && input[0] >= '1' && input[0] <= '7') {
            return input[0] - '0'; // Convert char to int
        }
        cout << "Invalid choice. Please enter a number between 1 and 7.\n";
    }
}

// Function to get a valid category (Strictly Fiction or Non-fiction)
string getValidCategory() {
    string category;
    cin.ignore();
    while (true) {
        cout << "Enter Category (Fiction / Non-fiction): ";
        getline(cin, category);

        if (category == "Fiction" || category == "Non-fiction") return category;
        cout << "Invalid category! Please enter 'Fiction' or 'Non-fiction' exactly.\n";
    }
}

void Library::addBook() {
    string id, isbn, title, author, edition, publication, category;

    category = getValidCategory();

    cout << "Enter ID: ";
    getline(cin, id);

    string idLower = id;
    for (char &c : idLower) c = tolower(c);

    for (Book &b : books) {
        string existingID = b.getID();
        for (char &c : existingID) c = tolower(c);

        if (existingID == idLower) {
            cout << "Duplicate ID! Try again.\n";
            return;
        }
    }

    cout << "Enter ISBN: "; getline(cin, isbn);
    cout << "Enter Title: "; getline(cin, title);
    cout << "Enter Author: "; getline(cin, author);
    cout << "Enter Edition: "; getline(cin, edition);
    cout << "Enter Publication: "; getline(cin, publication);

    books.push_back(Book(id, isbn, title, author, edition, publication, category));
    cout << "Book added successfully!\n";
}

void Library::viewAllBooks() {
    if (books.empty()) {
        cout << "No books available.\n";
        return;
    }
    cout << "ID\tISBN\tTitle\tAuthor\tEdition\tPublication\tCategory\n";
    for (Book &b : books) {
        b.displayBook();
    }
}

void Library::viewBooksByCategory() {
    if (books.empty()) {
        cout << "No books available.\n";
        return;
    }
    string category = getValidCategory();
    cout << "Books in category: " << category << "\n";
    for (Book &b : books) {
        if (b.getCategory() == category) {
            b.displayBook();
        }
    }
}

void Library::editBook() {
    if (books.empty()) {
        cout << "No books available to edit.\n";
        return;
    }

    string id;
    cin.ignore();
    cout << "Enter Book ID to edit: ";
    getline(cin, id);

    string idLower = id;
    for (char &c : idLower) c = tolower(c);

    for (Book &b : books) {
        string existingID = b.getID();
        for (char &c : existingID) c = tolower(c);

        if (existingID == idLower) {
            string isbn, title, author, edition, publication;
            cout << "Enter new ISBN: "; getline(cin, isbn);
            cout << "Enter new Title: "; getline(cin, title);
            cout << "Enter new Author: "; getline(cin, author);
            cout << "Enter new Edition: "; getline(cin, edition);
            cout << "Enter new Publication: "; getline(cin, publication);

            b.editBook(isbn, title, author, edition, publication);
            cout << "Book details updated successfully!\n";
            return;
        }
    }
    cout << "Book ID not found.\n";
}

void Library::searchBook() {
    if (books.empty()) {
        cout << "No books available.\n";
        return;
    }

    string id;
    cin.ignore();
    cout << "Enter Book ID to search: ";
    getline(cin, id);

    string idLower = id;
    for (char &c : idLower) c = tolower(c);

    for (Book &b : books) {
        string existingID = b.getID();
        for (char &c : existingID) c = tolower(c);

        if (existingID == idLower) {
            cout << "Book Found:\n";
            cout << "ID\tISBN\tTitle\tAuthor\tEdition\tPublication\tCategory\n";
            b.displayBook();
            return;
        }
    }
    cout << "Book ID not found.\n";
}

void Library::deleteBook() {
    if (books.empty()) {
        cout << "No books available.\n";
        return;
    }

    string id;
    cin.ignore();
    cout << "Enter Book ID to delete: ";
    getline(cin, id);

    string idLower = id;
    for (char &c : idLower) c = tolower(c);

    for (auto it = books.begin(); it != books.end(); ++it) {
        string existingID = it->getID();
        for (char &c : existingID) c = tolower(c);

        if (existingID == idLower) {
            books.erase(it);
            cout << "Book deleted successfully!\n";
            return;
        }
    }
    cout << "Book ID not found.\n";
}

int main() {
    Library lib;
    int choice;
    
    do {
        cout << "\nLibrary Management System";
        cout << "\n1. Add Book";
        cout << "\n2. Edit Book";
        cout << "\n3. Search Book";
        cout << "\n4. Delete Book";
        cout << "\n5. View Books by Category";
        cout << "\n6. View All Books";
        cout << "\n7. Exit";

        choice = getValidChoice();

        switch (choice) {
        case 1: lib.addBook(); break;
        case 2: lib.editBook(); break;
        case 3: lib.searchBook(); break;
        case 4: lib.deleteBook(); break;
        case 5: lib.viewBooksByCategory(); break;
        case 6: lib.viewAllBooks(); break;
        case 7: cout << "Exiting program...\n"; break;
        }
    } while (choice != 7);
    
    return 0;
}
